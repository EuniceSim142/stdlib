/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var parseJSON = require( '@stdlib/utils/parse-json' );
var random = require( './../lib' );
var arcsine = random.arcsine;

// Return Pseudo-Random Number Generators (drawn from many different distributions; Using arcsine distribution to demonstrate):
var alpha = -10;
var beta = 1.2;

// Generate a pseudo-random number:
console.log( arcsine(alpha, beta) );
// => <number>

// Specify values for variables and prng options
console.log( arcsine(alpha, beta, {
	'seed': 1234,
	'prng': random.minstd,
	'copy': false
}) );
// => <number>

// Generate a pseudo-random number generator:
var arcsinePrng = arcsine.factory(alpha, beta);

// Use the arcsinePrng
console.log( arcsinePrng() );
// => <number>

// To get prng state information:
var state = arcsinePrng.state;
var stateLength = arcsinePrng.stateLength;
var byteLength = arcsinePrng.byteLength;
console.log({
	'state': state,
	'stateLength': stateLength,
	'byteLength': byteLength
});
/* =>
    {
        'state': <Uint32Array>,
        'stateLength': <number>,
        'byteLength': <number>
    }
*/

// To serialize PRNG to a JSON object:
var json = JSON.stringify(arcsinePrng);
console.log( json );
/* =>
    {
        'type': 'PRNG',
        'name': 'arcsine',
        'state': ...,
        params: ...
    }
*/

// To de-serialize JSON object and retrieve PRNG:
var prng = parseJSON(json, random.reviveBasePRNG);
console.log( prng() );
// => <number>

console.log({
	'stateData': prng.state.data === arcsinePrng.state.data,
	'stateType': prng.state.type === arcsinePrng.state.type,
	'type': prng.type === arcsinePrng.type,
	'name': prng.name === arcsinePrng.name,
	'params': prng.params === arcsinePrng.params
});
/* =>
    {
        'stateData': true,
        'stateType': true,
        'type': true,
        'name': true,
        'params': true
    }
*/
